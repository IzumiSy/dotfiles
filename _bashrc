# --------------------
#    custom .bashrc
# --------------------

# http://www.itmedia.co.jp/help/tips/linux/l0612.html
stty stop undef

# Workaround to prevent problem with Byobu that occurs in connecting with Teraterm
export VTE_CJK_WIDTH=1

# Bash shell settings
shopt -s cdspell &> /dev/null;
shopt -s autocd  &> /dev/null;

# Settings for history
export HISTCONTROL=ignoreboth:erasedups
export HISTIGNORE="ls:ll:cd .."
export HISTSIZE=5000

# Command existence detector
# Need to be defined here
function detect_command() {
  type "$1" &> /dev/null ;
}

# Show welcome message
if detect_command figlet ; then
  echo 'Terminal' | figlet -m $0 -f larry3d
fi

# Fortune
if detect_command fortune ; then
  fortune -s
  echo ""
fi

# Exports user binary files
export PATH=$PATH:~/bin/

# --------------------------------
#   Environment-related settings
# --------------------------------

# OSX
function apply_osx_preference() {
  alias updatedb='sudo /usr/libexec/locate.updatedb'
  alias ls='gls --color=auto'

  git_prompt_path='/Library/Developer/CommandLineTools/'
  git_completion_path='/Library/Developer/CommandLineTools/'

  source "$git_completion_path/usr/share/git-core/git-completion.bash"
  source "$git_prompt_path/usr/share/git-core/git-prompt.sh"
}

# Unix
function apply_unix_preference() {
  alias ls='ls --color=auto'

  source "/etc/bash_completion.d/git-prompt"
  source "/etc/profile.d/bash_completion.sh"
}

if [[ "$OSTYPE" = "darwin"* ]] ; then
  apply_osx_preference
else
  apply_unix_preference
fi

# ---------------
#   Set $GOPATH
# ---------------
if detect_command go ; then
  GO_PATH="$HOME/gocodes"
  [ ! -e "${GO_PATH}" ] && mkdir -p "${GO_PATH}"
  export GOPATH="$GO_PATH"
  export PATH="$PATH:${GO_PATH}/bin"
fi

# -----------------------------------
#   Setting for command line prompt
# -----------------------------------
function base_line() {
  _bold="\[\e[1;1m\]"
  _green="\[\e[1;32m\]"
  _blue="\[\e[1;34m\]"
  _cyan="\[\e[1;104m\]"
  _clear="\[\e[00m\]"
  echo "${_cyan}\u${_clear} ${_bold}\w${_clear}";
}
export PS1="$(base_line)\n ${text}$ "
export CLICOLOR=1

# --------------------
#   Settings for Git
# --------------------
if detect_command git ; then
  # https://github.com/jcgoble3/gitstuff/blob/master/gitprompt.sh
  function __git_status() {
    local status="$(git status --porcelain 2>/dev/null)"
    local output=''

    [[ -n $(egrep '^[MADRC]' <<< "$status") ]] && output="+"
    [[ -n $(egrep '^.[MD]' <<< "$status") ]] && output="!"
    [[ -n $(egrep '^\?\?' <<< "$status") ]] && output="?"
    [[ $output ]] && echo " [$output]"
  }

  function branch_name() {
    if detect_command __git_ps1 ; then
      echo '\[\e[0;36m\]$(__git_ps1)\[\e[00m\]';
    fi
  }

  function git_status() {
    if detect_command __git_status ; then
      echo '\[\e[0;94m\]$(__git_status)\[\e[00m\]';
    fi
  }

  function __get_branch_name() {
    git branch | grep "*" | cut -d ' ' -f 2
  }

  # Show branch name and repo status
  export PS1="$(base_line)\n$(branch_name)$(git_status) ${text}$ "

  # Git command aliases
  alias gad='git add .'
  alias gadi='git add -i'
  alias gd='git diff --cached'
  alias gcm='git commit -m'
  alias gch='git checkout'
  alias glo='git log --oneline --decorate --graph'
  alias gs='git status'
  alias gpl='git pull origin $(__get_branch_name)'
  alias gb='git branch'

  # Delete merged branches
  alias gcmb="git branch --merged | grep -vE '^\*|master$|develop$' | xargs -I % git branch -d %"

  if detect_command peco ; then
    alias pco='git branch | peco | xargs git checkout'
  fi

  # An alias for "git push" with master blockage
  function gpo() {
    if [ $(__get_branch_name) == "master" ] ; then
      echo "Master push blocked :)"
    else
      git push origin "$(__get_branch_name)"
    fi
  }

  # Alias for Hub
  if detect_command hub ; then
    alias git='hub'
    alias gbw='git browse --'
  fi
fi

# ls
alias l='ls'
alias la='ls -a'
alias ll='ls -Flh --group-directories-first'
alias lla='ls -Flha --group-directories-first'

# other
alias x='exit'
alias v='vim'
alias c='clear'
alias bl="byobu -l"

# Always show prompt
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# fasd customized
if detect_command peco ; then
  alias hpco='eval $(history | cut -c 8- | peco)'

  # Commands with fasd
  if detect_command fasd ; then
    function dpco {
      local dir="$( d | awk '{ print $2 }' | peco --query \"$(pwd)\ \" )"
      if [ ! -z "$dir" ] ; then
        cd "$dir"
      fi
    }
  fi
fi

# -----------------------------------------
#   Loads rbenv, nvm, pyenv, direnv, fasd
# -----------------------------------------
export PATH="$HOME/.rbenv/bin:$PATH"
type rbenv &> /dev/null && eval "$(rbenv init -)"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

export PYENV_ROOT="$HOME/.pyenv"
if [ -d "$PYENV_ROOT" ]; then
  export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
fi

if detect_command direnv ; then
  export EDITOR=vim
  eval "$(direnv hook bash)"
fi

if detect_command fasd ; then
  eval "$(fasd --init auto)"
fi

# --------------------------------
#   Launch GNU screen at startup
# --------------------------------
# if detect_command screen ; then
#   if [[ $TERM != "screen" ]] && [[ $TERM != "dumb" ]] ; then
#     screen -xR ^z^z
#   fi
# fi

# Source global definitions (For DigitalOcean)
# if [ -f /etc/bashrc ]; then
#   . /etc/bashrc
# fi
