# http://www.itmedia.co.jp/help/tips/linux/l0612.html
stty stop undef

# Workaround to prevent problem with Byobu that occurs in connecting with Teraterm
export VTE_CJK_WIDTH=1

# Bash shell settings
shopt -s cdspell &> /dev/null;
shopt -s autocd  &> /dev/null;

# Settings for history
export HISTCONTROL=ignoreboth:erasedups
export HISTIGNORE="ls:ll:cd .."
export HISTSIZE=5000

# Command existence detector
# Need to be defined here
function detect_command() {
  type "$1" &> /dev/null ;
}

# ----------------- #
#    Set $GOPATH    #
# ----------------- #

GO_PATH="$HOME/gocodes"
[ ! -e "${GO_PATH}" ] && mkdir -p "${GO_PATH}"
export GO111MODULE=on
export GOPATH="$GO_PATH"
export PATH="$PATH:${GO_PATH}/bin"

# --------------------------------------------------- #
#   Setting for command line prompt with Git status   #
# --------------------------------------------------- #

if [[ "$OSTYPE" = "darwin"* ]] ; then
  source "/Library/Developer/CommandLineTools/usr/share/git-core/git-completion.bash"
  source "/Library/Developer/CommandLineTools/usr/share/git-core/git-prompt.sh"
else
  source "/etc/bash_completion.d/git-prompt"
  source "/etc/profile.d/bash_completion.sh"
fi

# https://github.com/jcgoble3/gitstuff/blob/master/gitprompt.sh
function __git_status() {
  local status="$(git status --porcelain 2>/dev/null)"
  local output=''

  [[ -n $(egrep '^[MADRC]' <<< "$status") ]] && output="+"
  [[ -n $(egrep '^.[MD]' <<< "$status") ]] && output="!"
  [[ -n $(egrep '^\?\?' <<< "$status") ]] && output="?"
  [[ $output ]] && echo " [$output]"
}

function branch_name() {
  if detect_command __git_ps1 ; then
    echo '\[\e[0;36m\]$(__git_ps1)\[\e[00m\]';
  fi
}

function git_status() {
  if detect_command __git_status ; then
    echo '\[\e[0;94m\]$(__git_status)\[\e[00m\]';
  fi
}

function __get_branch_name() {
  git branch | grep "*" | cut -d ' ' -f 2
}

function base_line() {
  _bold="\[\e[1;1m\]"
  _green="\[\e[1;32m\]"
  _blue="\[\e[1;34m\]"
  _cyan="\[\e[1;104m\]"
  _clear="\[\e[00m\]"
  echo "${_cyan}\h${_clean} ${_green}[\$(date +%k:%M:%S)]${_clear} ${_bold}\w${_clear}";
}

export PS1="$(base_line)\n$(branch_name)$(git_status) ${text}$ "

# Git command aliases
alias gad='git add .'
alias gadi='git add -i'
alias gd='git diff --cached'
alias gcm='git commit -m'
alias gch='git checkout'
alias glo='git log --oneline --decorate --graph'
alias gs='git status'
alias gpl='git pull origin $(__get_branch_name)'
alias gb='git branch'

# Delete merged branches
alias gcmb="git branch --merged | grep -vE '^\*|master$|develop$' | xargs -I % git branch -d %"

if detect_command peco ; then
  alias pco='git branch | peco | xargs git checkout'
fi

# An alias for "git push" with master blockage
function gpo() {
  if [ $(__get_branch_name) != "master" ] && [ $(__get_branch_name) != "develop" ] ; then
    git push origin "$(__get_branch_name)"
  else
    echo "Master push blocked :)"
  fi
}

# An alias for force "git push" with master blockage
function gpof() {
  if [ $(__get_branch_name) != "master" ] && [ $(__get_branch_name) != "develop" ] ; then
    git push origin "$(__get_branch_name)" --force-with-lease
  else
    echo "Commits pushing to develop or master is blocked :)"
  fi
}

# ------------------ #
#    Colored "ls"    #
# ------------------ #

export CLICOLOR=1
export LSCOLORS=gxfxcxdxbxegexabagacad
ls --color=auto &> /dev/null && alias ls='ls --color=auto' ||
alias la='ls -a'
alias ll='ls -Flh1v --group-directories-first'
alias lla='ls -Flh1va --group-directories-first'

# other
alias x='exit'
alias v='vim'
alias c='clear'
alias sc='screen'
alias be='bundle exec'

# Always show prompt
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# fasd customized
alias hist='eval $(history | cut -c 8- | peco)'

# Commands with fasd
function dpco() {
  local dir="$( d | awk '{ print $2 }' | peco --query \"$(pwd)\ \" )"
  if [ ! -z "$dir" ] ; then
    cd "$dir"
  fi
}

# ----------------------------------------- #
#   Loads rbenv, nvm, pyenv, direnv, fasd   #
# ----------------------------------------- #

# Homebrew's sbin
export PATH="/usr/local/sbin:$PATH"

export PATH="$HOME/.rbenv/bin:$PATH"
type rbenv &> /dev/null && eval "$(rbenv init -)"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

export PYENV_ROOT="$HOME/.pyenv"
if [ -d "$PYENV_ROOT" ]; then
  export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
fi

if detect_command direnv ; then
  export EDITOR=vim
  eval "$(direnv hook bash)"
fi

if detect_command fasd ; then
  eval "$(fasd --init auto)"
fi

# --------------------------------
#   Launch GNU screen at startup
# --------------------------------
# if detect_command screen ; then
#   if [[ $TERM != "screen" ]] && [[ $TERM != "dumb" ]] ; then
#     screen -xR ^z^z
#   fi
# fi

# Source global definitions (For DigitalOcean)
# if [ -f /etc/bashrc ]; then
#   . /etc/bashrc
# fi
