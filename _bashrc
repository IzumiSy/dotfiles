# -------------------------------------------------
#  __________               .__
#  \______   \_____    _____|  |_________   ____
#   |    |  _/\__  \  /  ___/  |  \_  __ \_/ ___\ 
#   |    |   \ / __ \_\___ \|   Y  \  | \/\  \___
#   |______  /(____  /____  >___|  /__|    \___  >
#          \/      \/     \/     \/            \/
#
# -------------------------------------------------

# http://www.itmedia.co.jp/help/tips/linux/l0612.html
stty stop undef

# Workaround to prevent problem with Byobu that occurs in connecting with Teraterm
export VTE_CJK_WIDTH=1

# Bash shell settings
shopt -s cdspell &> /dev/null;
shopt -s autocd  &> /dev/null;

# Settings for history
export HISTCONTROL=ignoreboth:erasedups
export HISTIGNORE="ls:ll:cd .."
export HISTSIZE=5000

# Command existence detector
# Need to be defined here
function detect_command() {
  type "$1" &> /dev/null ;
}

if [[ "$OSTYPE" = "darwin"* ]] ; then
  # git must be installed via homebrew
  source "/usr/local/etc/bash_completion.d/git-prompt.sh"
  source "/usr/local/etc/bash_completion.d/git-completion.bash"
  # source "/Library/Developer/CommandLineTools/usr/share/git-core/git-completion.bash"
  # source "/Library/Developer/CommandLineTools/usr/share/git-core/git-prompt.sh"
else
  # this usually aims for Ubuntu
  source "/etc/bash_completion.d/git-prompt"
  source "/etc/profile.d/bash_completion.sh"
fi

# https://github.com/jcgoble3/gitstuff/blob/master/gitprompt.sh
function __git_status() {
  local status="$(git status --porcelain 2>/dev/null)"
  local output=''

  [[ -n $(egrep '^[MADRC]' <<< "$status") ]] && output="+"
  [[ -n $(egrep '^.[MD]' <<< "$status") ]] && output="!"
  [[ -n $(egrep '^\?\?' <<< "$status") ]] && output="?"
  [[ $output ]] && echo " [$output]"
}

function __get_branch_name() {
  git branch | grep "*" | cut -d ' ' -f 2
}

function branch_name() {
  if detect_command __git_ps1 ; then
    echo '\[\e[0;36m\]$(__git_ps1)\[\e[00m\]';
  fi
}

function git_status() {
  if detect_command __git_status ; then
    echo '\[\e[0;94m\]$(__git_status)\[\e[00m\]';
  fi
}

function base_line() {
  _bold="\[\e[1;1m\]"
  _green="\[\e[1;32m\]"
  _blue="\[\e[1;34m\]"
  _cyan="\[\e[1;104m\]"
  _clear="\[\e[00m\]"
  echo "${_cyan}\h${_clean} ${_green}[\$(date +%k:%M:%S)]${_clear} ${_bold}\w${_clear}";
}

export PS1="$(base_line)\n$(branch_name)$(git_status) ${text}$ "

# Git command aliases
alias gad='git add .'
alias gadi='git add -i'
alias gd='git diff --cached'
alias gcm='git commit -m'
alias gch='git checkout'
alias glo='git log --oneline --decorate --graph'
alias gs='git status --short'
alias gpl='git pull origin $(__get_branch_name)'
alias gb='git branch'
alias gau='git commit -a -m "ci skip"'

# Delete merged branches
alias gcmb="git branch --merged | grep -vE '^\*|master$|develop$' | xargs -I % git branch -d %"

if detect_command peco ; then
  alias pco='git branch | peco | xargs git checkout'
fi

# An alias for "git push" with master blockage
function gpo() {
  if [ $(__get_branch_name) != "master" ] && [ $(__get_branch_name) != "develop" ] ; then
    git push origin "$(__get_branch_name)"
  else
    echo "Master push blocked :)"
  fi
}

# An alias for force "git push" with master blockage
function gpof() {
  if [ $(__get_branch_name) != "master" ] && [ $(__get_branch_name) != "develop" ] ; then
    git push origin "$(__get_branch_name)" --force-with-lease
  else
    echo "Commits pushing to develop or master is blocked :)"
  fi
}

function gasq() {
  git reset --soft $(git merge-base --fork-point $1) && git commit
}

# NOTE: OSX needs "coreutils" package which can be installed through homebrew
export CLICOLOR=1
export LSCOLORS=gxfxcxdxbxegexabagacad
alias ls="ls --color=auto"
alias la='ls -a'
alias ll='\clear && ls -Flh1v --group-directories-first'
alias lla='\clear && ls -Flh1va --group-directories-first'
detect_command gls \
  && alias ls="gls --color=auto"

# others
alias x='exit'
alias v='vim'
alias c='clear'
alias sc='screen'
alias be='bundle exec'
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias hist='eval $(history | cut -c 8- | peco)'

function dp() {
  cd $( d | awk '{ print $2 }' | peco --query \"$(pwd)\ \" )
}

# Homebrew's sbin
export PATH="/usr/local/sbin:$PATH"

# Default golang setting
export GO111MODULE=on
export PATH=$PATH:$HOME/go/bin

export NVM_DIR="$HOME/.nvm" \
  && test -e "$NVM_DIR/nvm.sh" \
  && \. "$NVM_DIR/nvm.sh" \
  && echo "Initialized: nvm"

# export PYENV_ROOT="$HOME/.pyenv" \
#   && test -d "$PYENV_ROOT" \
#   && export PATH="$PYENV_ROOT/bin:$PATH" \
#   && eval "$(pyenv init -)" \
#   && eval "$(pyenv virtualenv-init -)" \
#   && echo "Initialized: pyenv"

detect_command fasd \
  && eval "$(fasd --init auto)" \
  && echo "Initialized: fasd"

# detect_command direnv \
#   && export EDITOR=vim \
#   && eval "$(direnv hook bash)"

# Loading rbenv
# `rbenv init` at default runs rehashing but this is really, really slow.
# so here runs `rbenv rehash` with ampersand in order to make it backgrounded.
export PATH="$HOME/.rbenv/bin:$PATH" type rbenv &> /dev/null \
  && eval "$(rbenv init --no-rehash -)" \
  && (rbenv rehash &) 2> /dev/null \
  && echo "Initialized: rbenv"

# See https://www.iterm2.com/3.3/documentation-scripting-fundamentals.html
function iterm2_print_user_vars() {
  if detect_command gcloud ; then
    gcp_profile=$(cat $HOME/.config/gcloud/active_config)
    gcp_project=$(awk '/project/{print $3}' $HOME/.config/gcloud/configurations/config_$gcp_profile)
    iterm2_set_user_var gcpProjectId $gcp_project
  fi
}
